{"version":3,"file":"static/js/242.2fa5f89c.chunk.js","mappings":"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","sources":["webpack://project-managment-app/./src/pages/settings/settings.module.scss?3724","pages/settings/Settings.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"settings_wrapper__Klffn\",\"btnCancelSave\":\"settings_btnCancelSave__6Gta9\",\"rightBlock\":\"settings_rightBlock__gMiie\",\"buttonBlockRight\":\"settings_buttonBlockRight__YzTc9\",\"btnDelete\":\"settings_btnDelete__t9NgQ\",\"btnSave\":\"settings_btnSave__LknDn\",\"formSettings\":\"settings_formSettings__FLKG4\",\"formItem\":\"settings_formItem__OvJM2\",\"fieldError\":\"settings_fieldError__9Nx5O\",\"settings\":\"settings_settings__Nz+By\",\"leftBlock\":\"settings_leftBlock__qtOUq\",\"wrapperEye\":\"settings_wrapperEye__WmPoi\",\"button\":\"settings_button__-STES\",\"imageBlock\":\"settings_imageBlock__j3iej\",\"buttonBlock\":\"settings_buttonBlock__+S+gp\",\"testWrapper\":\"settings_testWrapper__5p+EK\"};","import React, { MouseEventHandler, useEffect, useRef, useState } from 'react';\nimport {\n  authSelector,\n  thunkDeleteUser,\n  thunkGetUserById,\n  thunkSignIn,\n  thunkUpdateUser,\n} from 'store/authSlice';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport { useForm } from 'react-hook-form';\nimport { Signup } from 'api/types';\nimport { useTranslation } from 'react-i18next';\nimport Icon from 'components/Icon/Icon';\nimport settingsImage from 'assets/images/settings.png';\nimport { parseJwt } from 'utils/func/parsejwt';\nimport { getTokenFromLS } from 'utils/func/localStorage';\nimport {\n  BtnColor,\n  ModalAction,\n  resetModal,\n  setModalOpen,\n  stateModalSelector,\n} from 'store/modalSlice';\nimport { toast } from 'react-toastify';\nimport { setIsPending } from 'store/appSlice';\nimport { getErrorMessage } from 'utils/func/handleError';\nimport { getMsgError } from 'utils/func/getMsgError';\nimport styles from './settings.module.scss';\n\nconst Settings = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n  const { user } = useAppSelector(authSelector);\n  const passwordField = useRef<HTMLInputElement | null>(null);\n  const [isShowText, setIsShowText] = useState(false);\n  const { modalAction } = useAppSelector(stateModalSelector);\n  const [userEdit, setUserEdit] = useState(false);\n\n  const {\n    register,\n    getValues,\n    trigger,\n    clearErrors,\n    setValue,\n    reset,\n    formState: { errors },\n  } = useForm<Signup>({\n    reValidateMode: 'onSubmit',\n    defaultValues: { name: '', login: '', password: '' },\n  });\n\n  useEffect(() => {\n    setValue('name', user.name);\n    setValue('login', user.login);\n  }, [user.name, user.login, setValue]);\n\n  const handleSaveNewProfile: React.MouseEventHandler<HTMLButtonElement> = async () => {\n    if (!userEdit) {\n      dispatch(\n        setModalOpen({\n          message: t('SETTINGS.EDIT_MODAL_TEXT'),\n          color: BtnColor.BLUE,\n          btnText: t('MODAL.OK'),\n          action: ModalAction.EDIT_USER_PROFILE,\n        })\n      );\n    } else {\n      const res = await trigger();\n      if (res) {\n        dispatch(\n          setModalOpen({\n            message: t('SETTINGS.SAVE_MODAL_TEXT'),\n            color: BtnColor.BLUE,\n            btnText: t('MODAL.SAVE'),\n            action: ModalAction.SAVE_USER_PROFILE,\n          })\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    const token = getTokenFromLS();\n    const { id } = parseJwt(token);\n    switch (modalAction) {\n      case ModalAction.EDIT_USER_PROFILE:\n        setUserEdit(true);\n        dispatch(resetModal());\n        break;\n\n      case ModalAction.SAVE_USER_PROFILE:\n        dispatch(resetModal());\n        const userData = getValues();\n        const user = Object.assign(userData, { _id: id });\n        dispatch(setIsPending(true));\n        async function update() {\n          try {\n            const res = await dispatch(thunkUpdateUser({ user, token })).unwrap();\n            setUserEdit(false);\n            const data = await dispatch(thunkSignIn(res)).unwrap();\n            await dispatch(thunkGetUserById(data)).unwrap();\n            toast.success(t('AUTH.200_USER_UPDATE'));\n          } catch (err) {\n            const error = getErrorMessage(err);\n            toast.error(t(getMsgError(error)));\n          } finally {\n            dispatch(setIsPending(false));\n          }\n        }\n        update();\n        break;\n\n      case ModalAction.DELETE_USER_PROFILE:\n        setUserEdit(false);\n        dispatch(resetModal());\n        async function deleteUser() {\n          try {\n            await dispatch(thunkDeleteUser({ id, token })).unwrap();\n            toast.success(t('AUTH.200_USER_DELETE'));\n          } catch (err) {\n            const error = getErrorMessage(err);\n            toast.error(t(getMsgError(error)));\n          } finally {\n            dispatch(setIsPending(false));\n          }\n        }\n        deleteUser();\n        break;\n\n      default:\n        break;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, modalAction]);\n\n  const handleDeleteProfile = () => {\n    dispatch(\n      setModalOpen({\n        message: `${t('MODAL.DELETE_MSG')} ${t('MODAL.PROFILE')}`,\n        color: BtnColor.RED,\n        btnText: t('MODAL.DELETE'),\n        action: ModalAction.DELETE_USER_PROFILE,\n      })\n    );\n  };\n\n  const handlerCancelSave: React.MouseEventHandler<HTMLButtonElement> = () => {\n    setUserEdit(false);\n    reset();\n    setValue('name', user.name);\n    setValue('login', user.login);\n  };\n\n  const { ref, ...rest } = register('password', {\n    required: { value: true, message: 'PASSWORD_LENGTH' },\n    pattern: { value: /^\\S[a-zA-Z0-9_]+$/i, message: 'PATTERN' },\n    minLength: { value: 6, message: 'PASSWORD_LENGTH' },\n    onChange: (e) => clearErrors(e.target.name),\n  });\n\n  const showPassword: MouseEventHandler<HTMLButtonElement> = () => {\n    if (passwordField?.current) {\n      if (passwordField?.current.getAttribute('type') === 'text') {\n        setIsShowText(false);\n        (passwordField?.current as HTMLInputElement).setAttribute('type', 'password');\n      } else {\n        setIsShowText(true);\n        (passwordField?.current as HTMLInputElement).setAttribute('type', 'text');\n      }\n    }\n  };\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.settings}>\n        <div className={styles.leftBlock}>\n          <h1>{t('AUTH.USER_SETTINGS')}</h1>\n          <form className={styles.formSettings}>\n            <div className={styles.formItem}>\n              <label htmlFor=\"name\">{t('AUTH.NAME')}</label>\n              <input\n                id=\"name\"\n                {...register('name', {\n                  required: { value: true, message: 'LENGTH' },\n                  pattern: { value: /^\\S[a-zA-Z0-9_]+$/i, message: 'PATTERN' },\n                  minLength: { value: 4, message: 'LENGTH' },\n                  onChange: (e) => clearErrors(e.target.name),\n                })}\n                className={errors.name && styles.inputError}\n                autoComplete=\"off\"\n                disabled={!userEdit}\n              />\n              {errors.name && (\n                <span className={styles.fieldError}>{t(`AUTH.${errors.name.message}`)}</span>\n              )}\n            </div>\n            <div className={styles.formItem}>\n              <label htmlFor=\"login\">{t('AUTH.LOGIN')}</label>\n              <input\n                id=\"login\"\n                {...register('login', {\n                  required: { value: true, message: 'LENGTH' },\n                  pattern: { value: /^\\S[a-zA-Z0-9_]+$/i, message: 'PATTERN' },\n                  minLength: { value: 4, message: 'LENGTH' },\n                  onChange: (e) => clearErrors(e.target.name),\n                })}\n                className={errors.login && styles.inputError}\n                autoComplete=\"off\"\n                disabled={!userEdit}\n              />\n              {errors.login && (\n                <span className={styles.fieldError}>{t(`AUTH.${errors.login.message}`)}</span>\n              )}\n            </div>\n            <div className={styles.formItem}>\n              <label htmlFor=\"password\">{t('AUTH.PASSWORD')}</label>\n              <div className={styles.wrapperEye}>\n                <input\n                  id=\"password\"\n                  type={'password'}\n                  {...rest}\n                  name=\"password\"\n                  ref={(e) => {\n                    ref(e);\n                    passwordField.current = e;\n                  }}\n                  className={errors.password && styles.inputError}\n                  autoComplete=\"off\"\n                  disabled={!userEdit}\n                  placeholder=\"******\"\n                />\n                {isShowText ? (\n                  <button type=\"button\" className={styles.button} onClick={(e) => showPassword(e)}>\n                    <Icon icon=\"eye-slashed\" size=\"24\" color=\"#9a9a9a\" />\n                  </button>\n                ) : (\n                  <button type=\"button\" className={styles.button} onClick={(e) => showPassword(e)}>\n                    <Icon icon=\"eye-open\" size=\"24\" color=\"#9a9a9a\" />\n                  </button>\n                )}\n              </div>\n              {errors.password && (\n                <span className={styles.fieldError}>{t(`AUTH.${errors.password.message}`)}</span>\n              )}\n            </div>\n          </form>\n          <div className={styles.buttonBlock}>\n            <button className={styles.btnSave} onClick={handleSaveNewProfile}>\n              {userEdit ? t('SETTINGS.SAVE_CHANGES') : t('SETTINGS.EDIT')}\n            </button>\n            {userEdit ? (\n              <button className={styles.btnCancelSave} onClick={handlerCancelSave}>\n                {t('MODAL.CANCEL')}\n              </button>\n            ) : null}\n          </div>\n        </div>\n        <div className={styles.rightBlock}>\n          <div className={styles.buttonBlockRight}>\n            <button className={styles.btnDelete} onClick={handleDeleteProfile}>\n              {t('SETTINGS.DELETE_ACCOUNT')}\n            </button>\n          </div>\n          <div className={styles.imageBlock}>\n            <img src={settingsImage} alt=\"space discovery\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Settings;\n"],"names":["t","useTranslation","dispatch","useAppDispatch","user","useAppSelector","authSelector","passwordField","useRef","useState","isShowText","setIsShowText","modalAction","stateModalSelector","userEdit","setUserEdit","useForm","reValidateMode","defaultValues","name","login","password","register","getValues","trigger","clearErrors","setValue","reset","errors","formState","useEffect","handleSaveNewProfile","setModalOpen","message","color","BtnColor","btnText","action","ModalAction","token","getTokenFromLS","id","parseJwt","resetModal","userData","Object","assign","_id","setIsPending","update","thunkUpdateUser","unwrap","res","thunkSignIn","data","thunkGetUserById","toast","error","getErrorMessage","getMsgError","deleteUser","thunkDeleteUser","required","value","pattern","minLength","onChange","e","target","ref","rest","showPassword","current","getAttribute","setAttribute","className","styles","htmlFor","autoComplete","disabled","type","placeholder","onClick","Icon","icon","size","src","settingsImage","alt"],"sourceRoot":""}