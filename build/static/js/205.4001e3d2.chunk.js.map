{"version":3,"file":"static/js/205.4001e3d2.chunk.js","mappings":"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","sources":["webpack://project-managment-app/./src/pages/boards/boards.module.scss?62fe","webpack://project-managment-app/./src/components/search/search.module.scss?6015","components/search/search.tsx","pages/boards/Boards.tsx","utils/hooks/useGetBoardsErrors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"boards_wrapper__QdP93\",\"card\":\"boards_card__Hzjou\",\"title\":\"boards_title__PvKgg\",\"wrapperTop\":\"boards_wrapperTop__Z3w24\",\"titleWrapper\":\"boards_titleWrapper__VA90Y\",\"icon\":\"boards_icon__Tbd2x\",\"button\":\"boards_button__SOTqq\",\"buttonChange\":\"boards_buttonChange__5FBTc\",\"iconChange\":\"boards_iconChange__mwzLT\",\"buttonWrapper\":\"boards_buttonWrapper__5daSa\",\"list\":\"boards_list__oEhsJ\",\"cardCreate\":\"boards_cardCreate__mYXdy\",\"cardName\":\"boards_cardName__Fvr8L\",\"cardCreateName\":\"boards_cardCreateName__DznDW\",\"image\":\"boards_image__NzjzR\",\"description\":\"boards_description__HGPfS\"};","// extracted by mini-css-extract-plugin\nexport default {\"btnReset\":\"search_btnReset__eXIkb\",\"btnSearch\":\"search_btnSearch__TyAXJ\",\"searchForm\":\"search_searchForm__vdWRA\",\"wrapperSearch\":\"search_wrapperSearch__6ZWyQ\"};","import React from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { BoardType } from 'store/boardsSlice';\nimport Icon from '../Icon/Icon';\nimport imgSearch from 'assets/images/search.png';\nimport styles from './search.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport { toast } from 'react-toastify';\n\ntype Search = {\n  search: string;\n};\n\ntype Props = {\n  boards: BoardType[];\n  setNewBoards: React.Dispatch<React.SetStateAction<BoardType[]>>;\n};\nconst Search = ({ boards, setNewBoards }: Props) => {\n  const { register, handleSubmit, reset } = useForm<Search>();\n  const { t } = useTranslation();\n  const onSubmit: SubmitHandler<Search> = async (data) => {\n    const reg = new RegExp(data.search, 'i');\n    const res = boards.filter((board) => reg.test(board.title.title));\n    if (!res.length) {\n      toast.success(t('SEARCH.EMPTY'));\n    }\n    setNewBoards(res);\n  };\n\n  const handlerReset = () => {\n    reset();\n    setNewBoards(boards);\n  };\n\n  return (\n    <div className={styles.wrapperSearch}>\n      <button className={styles.btnSearch} onClick={handleSubmit(onSubmit)}>\n        <img className={styles.imgSearch} src={imgSearch} alt=\"search image\" />\n      </button>\n      <button className={styles.btnReset} onClick={handlerReset}>\n        <Icon icon=\"close\" size=\"16\" color=\"#9a9a9a\" />\n      </button>\n      <form className={styles.searchForm} onSubmit={handleSubmit(onSubmit)}>\n        <input\n          type={'text'}\n          {...register('search')}\n          autoComplete=\"off\"\n          placeholder={t('SEARCH.FIND')}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from 'store/hooks';\nimport {\n  boardsSelector,\n  thunkGetUserBoards,\n  thunkCreateBoard,\n  BoardType,\n  thunkDeleteBoard,\n  thunkUpdateBoard,\n} from 'store/boardsSlice';\nimport {\n  BtnColor,\n  ModalAction,\n  modalActionSelector,\n  resetModal,\n  setChangeBoard,\n  setModalOpen,\n  userDescriptionSelector,\n  userTitleSelector,\n} from 'store/modalSlice';\nimport { useTranslation } from 'react-i18next';\nimport Icon from 'components/Icon/Icon';\nimport pencil from 'assets/images/pencil.png';\nimport styles from './boards.module.scss';\nimport { userSelector } from 'store/authSlice';\nimport { getTokenFromLS } from 'utils/func/localStorage';\nimport Search from 'components/search/search';\nimport { setIsPending } from 'store/appSlice';\nimport { ErrosType, useGetBoardsErrors } from 'utils/hooks/useGetBoardsErrors';\nimport { toast } from 'react-toastify';\n\nconst Boards = () => {\n  const [selectedBoard, setSelectedBoard] = useState<string>();\n\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const dispatch = useAppDispatch();\n  const modalAction = useAppSelector(modalActionSelector);\n  const userInputTitle = useAppSelector(userTitleSelector);\n  const userInputDescr = useAppSelector(userDescriptionSelector);\n\n  const user = useAppSelector(userSelector);\n  const userRef = useRef(user._id);\n\n  const boards = useAppSelector(boardsSelector);\n  const [newBoards, setNewBoards] = useState<BoardType[]>(boards);\n  const initialRenderBoardsRef = useRef(boards.length);\n\n  const messageErr = useGetBoardsErrors();\n  const messageErrRef = useRef(messageErr);\n\n  useEffect(() => {\n    const messages = messageErrRef.current;\n    const getBoards = async () => {\n      if (initialRenderBoardsRef.current === 0) {\n        dispatch(setIsPending(true));\n        try {\n          await dispatch(thunkGetUserBoards(getTokenFromLS())).unwrap();\n        } catch (err) {\n          const error = err as keyof ErrosType;\n          const message = messages[error] ? messages[error] : messages.DEFAULT;\n          toast.error(message);\n        } finally {\n          dispatch(setIsPending(false));\n        }\n      }\n    };\n\n    getBoards();\n  }, [dispatch]);\n\n  useEffect(() => {\n    setNewBoards(boards);\n  }, [boards]);\n  const navigateToBoardPage = (id: string) => {\n    navigate(`/boards/${id}`);\n  };\n\n  const createBoardHandler = () => {\n    dispatch(\n      setModalOpen({\n        title: `${t('BOARDS.CREATE')}`,\n        inputTitle: `${t('MODAL.TITLE')}`,\n        inputDescr: `${t('MODAL.DESCRIPTION')}`,\n        color: BtnColor.BLUE,\n        btnText: `${t('MODAL.CREATE')}`,\n        action: ModalAction.BOARD_CREATE,\n      })\n    );\n  };\n\n  const deleteBoardHandler = (event: React.MouseEvent, board: BoardType) => {\n    event.stopPropagation();\n    dispatch(\n      setModalOpen({\n        message: `${t('MODAL.DELETE_MSG')} ${board.title.title}?`,\n        color: BtnColor.RED,\n        btnText: `${t('MODAL.DELETE')}`,\n        action: ModalAction.BOARD_DELETE,\n      })\n    );\n    setSelectedBoard(board._id);\n  };\n\n  const changeBoardHandler = (event: React.MouseEvent, board: BoardType) => {\n    event.stopPropagation();\n    dispatch(setChangeBoard(true));\n    dispatch(\n      setModalOpen({\n        title: `${t('BOARDS.CHANGE')}`,\n        inputTitle: `${t('MODAL.TITLE')}`,\n        inputDescr: `${t('MODAL.DESCRIPTION')}`,\n        color: BtnColor.BLUE,\n        btnText: `${t('MODAL.CHANGE')}`,\n        action: ModalAction.BOARD_CHANGE,\n        defaultVals: {\n          title: board.title.title,\n          description: board.title.descr,\n        },\n      })\n    );\n    setSelectedBoard(board._id);\n  };\n\n  const deleteBoard = useCallback(async () => {\n    if (typeof selectedBoard !== 'string') return;\n    dispatch(setIsPending(true));\n    dispatch(thunkDeleteBoard({ boardId: selectedBoard, token: getTokenFromLS() }))\n      .unwrap()\n      .catch((err) => {\n        const error = err as keyof ErrosType;\n        const message = messageErr[error] ? messageErr[error] : messageErr.DEFAULT;\n        toast.error(message);\n      })\n      .finally(() => {\n        dispatch(setIsPending(false));\n      });\n  }, [dispatch, messageErr, selectedBoard]);\n\n  const changeBoard = useCallback(async () => {\n    if (typeof selectedBoard !== 'string') return;\n    const info = JSON.stringify({\n      title: userInputTitle,\n      descr: userInputDescr,\n    });\n    dispatch(setIsPending(true));\n    dispatch(\n      thunkUpdateBoard({\n        owner: userRef.current,\n        title: info,\n        users: [],\n        token: getTokenFromLS(),\n        boardId: selectedBoard,\n      })\n    )\n      .unwrap()\n      .catch((err) => {\n        const error = err as keyof ErrosType;\n        const message = messageErr[error] ? messageErr[error] : messageErr.DEFAULT;\n        toast.error(message);\n      })\n      .finally(() => {\n        dispatch(setIsPending(false));\n      });\n  }, [dispatch, messageErr, selectedBoard, userInputDescr, userInputTitle]);\n\n  const createBoard = useCallback(async () => {\n    dispatch(setIsPending(true));\n    const info = JSON.stringify({\n      title: userInputTitle,\n      descr: userInputDescr,\n    });\n    await dispatch(\n      thunkCreateBoard({\n        owner: userRef.current,\n        title: info,\n        users: [],\n        token: getTokenFromLS(),\n      })\n    )\n      .unwrap()\n      .catch((err) => {\n        const error = err as keyof ErrosType;\n        const message = messageErr[error] ? messageErr[error] : messageErr.DEFAULT;\n        toast.error(message);\n      })\n      .finally(() => {\n        dispatch(setIsPending(false));\n      });\n  }, [dispatch, messageErr, userInputDescr, userInputTitle]);\n\n  useEffect(() => {\n    if (modalAction === ModalAction.BOARD_CREATE) {\n      dispatch(resetModal());\n      createBoard();\n    }\n\n    if (modalAction === ModalAction.BOARD_DELETE) {\n      dispatch(resetModal());\n      deleteBoard();\n    }\n\n    if (modalAction === ModalAction.BOARD_CHANGE) {\n      dispatch(resetModal());\n      changeBoard();\n    }\n  }, [changeBoard, createBoard, deleteBoard, dispatch, modalAction]);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.wrapperTop}>\n        <h2 className={styles.title}>{t('BOARDS.TITLE')}</h2>\n        <Search boards={boards} setNewBoards={setNewBoards} />\n      </div>\n      <ul className={styles.list}>\n        <li className={`${styles.card} ${styles.cardCreate}`} onClick={createBoardHandler}>\n          <h3 className={`${styles.cardName} ${styles.cardCreateName}`}>{t('BOARDS.CREATE')}</h3>\n          <img src={pencil} alt=\"yellow pencil\" className={styles.image} />\n        </li>\n        {newBoards.map((board) => (\n          <li\n            key={board._id}\n            className={styles.card}\n            onClick={() => navigateToBoardPage(board._id)}\n          >\n            <div className={styles.titleWrapper}>\n              <h3 className={styles.cardName}>{board.title.title}</h3>\n              <div className={styles.buttonWrapper}>\n                <button\n                  className={styles.buttonChange}\n                  onClick={(e) => changeBoardHandler(e, board)}\n                >\n                  <Icon\n                    color=\"#0047ff\"\n                    size={100}\n                    icon=\"pen-change\"\n                    className={styles.iconChange}\n                  />\n                </button>\n                <button className={styles.button} onClick={(e) => deleteBoardHandler(e, board)}>\n                  <Icon color=\"#CC0707\" size={100} icon=\"trash\" className={styles.icon} />\n                </button>\n              </div>\n            </div>\n            <p className={styles.description}>{board.title.descr}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Boards;\n","import { useTranslation } from 'react-i18next';\n\nexport type ErrosType = {\n  BOARDS_403: string;\n  BOARDS_404: string;\n  BOARDS_400: string;\n  DEFAULT: string;\n};\n\nexport const useGetBoardsErrors = () => {\n  const { t } = useTranslation();\n\n  const errMessage: ErrosType = {\n    BOARDS_403: `${t('AUTH.403_USER')}`,\n    BOARDS_404: `${t('BOARDS.404_BOARDS')}`,\n    BOARDS_400: `${t('AUTH.400_USER_UPDATE')}`,\n    DEFAULT: `${t('AUTH.DEFAULT')}`,\n  };\n\n  return errMessage;\n};\n"],"names":["boards","setNewBoards","useForm","register","handleSubmit","reset","t","useTranslation","onSubmit","data","reg","RegExp","search","res","filter","board","test","title","length","toast","className","styles","onClick","src","alt","Icon","icon","size","color","type","autoComplete","placeholder","useState","selectedBoard","setSelectedBoard","navigate","useNavigate","dispatch","useAppDispatch","modalAction","useAppSelector","modalActionSelector","userInputTitle","userTitleSelector","userInputDescr","userDescriptionSelector","user","userSelector","userRef","useRef","_id","boardsSelector","newBoards","initialRenderBoardsRef","messageErr","BOARDS_403","BOARDS_404","BOARDS_400","DEFAULT","useGetBoardsErrors","messageErrRef","useEffect","messages","current","getBoards","setIsPending","thunkGetUserBoards","getTokenFromLS","unwrap","error","message","deleteBoard","useCallback","thunkDeleteBoard","boardId","token","catch","err","finally","changeBoard","info","JSON","stringify","descr","thunkUpdateBoard","owner","users","createBoard","thunkCreateBoard","ModalAction","resetModal","setModalOpen","inputTitle","inputDescr","BtnColor","btnText","action","pencil","map","id","e","event","stopPropagation","setChangeBoard","defaultVals","description","changeBoardHandler","deleteBoardHandler"],"sourceRoot":""}