{"version":3,"file":"static/js/972.c87af843.chunk.js","mappings":"oQACA,GAAgB,QAAU,uBAAuB,UAAY,yBAAyB,MAAQ,qBAAqB,YAAc,2BAA2B,YAAc,2BAA2B,eAAiB,8BAA8B,YAAc,2BAA2B,KAAO,qB,qECApS,EAA4B,0BAA5B,EAAoE,4BAApE,EAAuG,qBAAvG,EAAwI,0BAAxI,EAA0K,sBAA1K,EAAwM,sBAAxM,EAA2O,2BAA3O,EAAkR,0BAAlR,EAAwT,0BAAxT,EAA+V,2BAA/V,EAAiY,qBAAjY,EAAma,2BAAna,EAAuc,uBAAvc,EAA2e,2BAA3e,EAA+gB,uB,oBCA/gB,EAA2B,uBAA3B,EAA8D,wBAA9D,EAAmG,yBAAnG,EAAuI,uB,SCqDvI,EAzCa,SAACA,GACZ,IAAQC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACtBC,GAAWC,EAAAA,EAAAA,KAEXC,EAAgB,WACpBF,GAASG,EAAAA,EAAAA,IAAUN,IACnBG,GAASI,EAAAA,EAAAA,IAAiBN,IAC1BE,GAASK,EAAAA,EAAAA,MACX,EAEA,OACE,SAAC,KAAS,CAACC,YAAaT,EAASU,IAAKR,MAAOA,EAAM,SAChD,SAACS,EAAcC,GAEd,IAAMC,GAAK,QACTC,UAAWF,EAASG,WAAa,2CAA6C,OAC9EC,WAAYJ,EAASG,WAAa,YAAc,SAC7CJ,EAAaM,eAAeJ,OAEjC,OACE,+BACEK,UAAWC,EACXC,QAASf,EACTgB,IAAKV,EAAaW,UACdX,EAAaM,gBAAc,IAC/BJ,MAAOA,EAAM,UAEb,iCAAKK,UAAWC,GAAsBR,EAAaY,iBAAe,eAChE,gBACEL,UAAWC,EACXN,MAAO,CAAEG,WAAYhB,EAASwB,YAAYC,UAE5C,gBAAKP,UAAWC,EAAgB,SAAEnB,EAAS0B,cAInD,GAGN,EC6HA,EArJe,SAAC3B,GACd,IAAQ4B,GAAUC,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAA/CH,MACFI,EAAShC,EAAMiC,WACfC,EAAcN,EAAMI,EAAOrB,KAC3BP,GAAWC,EAAAA,EAAAA,KACT8B,GAAMC,EAAAA,EAAAA,KAAND,EAER,GAAoCE,EAAAA,EAAAA,WAAS,GAAM,eAA5CC,EAAU,KAAEC,EAAa,KAChC,GAKIC,EAAAA,EAAAA,IAAqB,CACvBC,KAAM,aALNC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OACbE,EAAK,EAALA,MAKIC,GAAWC,EAAAA,EAAAA,QAAwB,MACnCC,GAAcD,EAAAA,EAAAA,QAAuB,OAE3CE,EAAAA,EAAAA,YAAU,WACR9C,GAAS+C,EAAAA,EAAAA,IAAiB,CAAEC,QAASpB,EAAOoB,QAASlD,SAAU8B,EAAOrB,MACxE,GAAG,CAACP,EAAU4B,EAAOoB,QAASpB,EAAOrB,MAErC,IAAM0C,EAA2C,SAACC,GAChDlD,GACEmD,EAAAA,EAAAA,IAAuB,CACrBH,QAASpB,EAAOoB,QAChBlD,SAAU8B,EAAOrB,IACjB6C,MAAOxB,EAAOwB,MACd7B,MAAO2B,EAAKG,SAEdC,MAAK,kBAAMnB,GAAc,EAAM,GACnC,EAEMoB,EAAe,WACnBvD,GAASI,EAAAA,EAAAA,IAAiBwB,EAAOrB,MACjCP,GACEwD,EAAAA,EAAAA,IAAa,CACXC,QAAQ,GAAD,OAAK1B,EAAE,oBAAmB,YAAIH,EAAOL,MAAK,KACjDD,MAAOoC,EAAAA,GAAAA,IACPC,QAAQ,GAAD,OAAK5B,EAAE,iBACd6B,OAAQC,EAAAA,GAAAA,gBAGd,EAEMC,EAAa,WACjB,IAAMC,EAAYjC,EAAYkC,OAASlC,EAAYA,EAAYkC,OAAS,GAAGZ,MAAQ,EAAI,EACvFpD,GAASI,EAAAA,EAAAA,IAAiBwB,EAAOrB,MACjCP,GACEwD,EAAAA,EAAAA,IAAa,CACXjC,MAAM,GAAD,OAAKQ,EAAE,4BACZkC,WAAW,GAAD,OAAKlC,EAAE,gBACjBmC,WAAW,GAAD,OAAKnC,EAAE,sBACjBT,MAAOoC,EAAAA,GAAAA,KACPC,QAAQ,GAAD,OAAK5B,EAAE,iBACd6B,OAAQC,EAAAA,GAAAA,eAGZ7D,GAASmE,EAAAA,EAAAA,IAAaJ,GACxB,EAEMK,EAAkB,WACtB1B,IACAP,GAAc,EAChB,EAEA,OACE,SAAC,KAAS,CAAC7B,YAAasB,EAAOrB,IAAKR,MAAOH,EAAMG,MAAM,SACpD,SAACsE,EAAU5D,GAEV,IAAMC,GAAK,QACT4D,gBAAiB7D,EAASG,WAAa,YAAc,aAClDyD,EAASvD,eAAeJ,OAE7B,OACE,wCACE,WAAUkB,EAAOrB,IACjBQ,UAAWC,EACXE,IAAKmD,EAASlD,UACVkD,EAASvD,gBACTuD,EAASjD,iBAAe,IAC5BV,MAAOA,EAAM,UAEZwB,GACC,kBAAMhB,IAAKyB,EAAU5B,UAAWC,EAAauD,SAAUhC,EAAaU,GAAc,WAChF,kCACEuB,WAAS,EACTC,KAAK,QACDnC,EAAS,QAAS,CACpBoC,MAAO9C,EAAOL,MACdoD,SAAU,SACVC,UAAW,CAAEF,MAAO,GAAIjB,QAAS,aACjC,IACF1C,UAAS,UAAKC,EAAY,YAAIwB,EAAOa,MAAQrC,EAAe,IAC5D6D,OAAQtC,EAAaU,OAEvB,mBACElC,UAAS,UAAKC,EAAiB,YAAIA,GACnCyD,KAAK,SACLK,WAA2C,IAA/BC,OAAOC,KAAKxC,GAAQwB,QAAc,UAE9C,SAACiB,EAAA,EAAI,CAAC3D,MAAM,UAAU4D,KAAM,IAAKC,KAAK,OAAOpE,UAAWC,OAE1D,mBAAQD,UAAWC,EAAmBC,QAASmD,EAAgB,UAC7D,SAACa,EAAA,EAAI,CAAC3D,MAAM,UAAU4D,KAAM,IAAKC,KAAK,SAASpE,UAAWC,OAE5D,iBAAMD,UAAWC,EAAiB,SAC/BwB,EAAOa,OAAStB,EAAE,UAAD,OAAWS,EAAOa,MAAMI,gBAI9C,iCAAKvC,IAAK2B,EAAa9B,UAAWC,GAAwBqD,EAASjD,iBAAe,eAChF,gBAAKL,UAAWC,EAAkBC,QAAS,kBAAMkB,GAAc,EAAK,EAAC,SAClEP,EAAOL,SAEV,mBAAQR,UAAWC,EAAeC,QAASsC,EAAa,UACtD,SAAC0B,EAAA,EAAI,CAAC3D,MAAM,UAAU4D,KAAM,IAAKC,KAAK,QAAQpE,UAAWC,WAI/D,eAAID,UAAWC,KACf,SAAC,KAAS,CAACoE,YAAaxD,EAAOrB,IAAK8B,KAAM,WAAYoC,KAAK,OAAM,SAC9D,SAACY,GAAc,OACd,gCACEtE,UAAWC,GACPqE,EAAeC,gBAAc,IACjCpE,IAAKmE,EAAelE,SAAS,UAE5BW,GACCA,EAAYyD,KAAI,SAACC,EAAMC,GAAC,OACtB,SAAC,EAAI,CAAgB5F,SAAU2F,EAAM1F,SAAU8B,EAAOrB,IAAKR,MAAO0F,GAAvDD,EAAKjF,IAAuD,IAE1E8E,EAAeK,eACb,KAGT,iBAAK3E,UAAS,UAAKC,EAAiB,YAAIA,GAAoBC,QAAS6C,EAAW,UAC7E/B,EAAE,6BACH,SAACkD,EAAA,EAAI,CAAC3D,MAAM,UAAU4D,KAAM,IAAKC,KAAK,MAAMpE,UAAWC,UAI/D,GAGN,E,wCC0BA,EA3Kc,WACZ,OAAyCS,EAAAA,EAAAA,IAAe,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAAtEJ,EAAK,EAALA,MAAOoE,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASpE,EAAK,EAALA,MAC/B,GAA2EC,EAAAA,EAAAA,IACzE,SAACC,GAAK,OAAKA,EAAMmE,KAAK,IADhBC,EAAW,EAAXA,YAAaC,EAAc,EAAdA,eAAgBC,EAAc,EAAdA,eAAgBC,EAAM,EAANA,OAAQlC,EAAS,EAATA,UAGvD/D,GAAWC,EAAAA,EAAAA,KACTiG,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAgB7E,EAAAA,EAAAA,GAAe8E,EAAAA,IAC7BxE,GAAMC,EAAAA,EAAAA,KAAND,EACFyE,GAAO/E,EAAAA,EAAAA,GAAegF,EAAAA,KAE5B3D,EAAAA,EAAAA,YAAU,WAER,OADA9C,GAAS0G,EAAAA,EAAAA,IAAoB,GAAD,OAAIR,KACzB,WACLlG,GAAS2G,EAAAA,EAAAA,MACX,CACF,GAAG,CAACT,EAAIlG,KAER8C,EAAAA,EAAAA,YAAU,WACR,GAAI6C,EAAO,CACT,MAAwBA,EAAMiB,MAAM,KAAI,eAAjCC,EAAI,KAAEpD,EAAO,KAChBqD,EAAmBD,EACnBA,IACW,QAATA,IACF7G,GAAS+G,EAAAA,EAAAA,KAAQ,IACjB/G,GAASgH,EAAAA,EAAAA,OACThH,GAASiH,EAAAA,EAAAA,QAEK,2BAAZxD,IACF2C,EAASc,EAAAA,EAAAA,OAAe,CAAEC,SAAS,IACnCL,EAAmBD,EAAO,UAE5BO,EAAAA,GAAAA,MAAYrF,GAAEsF,EAAAA,EAAAA,GAAiBP,KAC/B9G,GAASsH,EAAAA,EAAAA,OAEb,CACA,OAAO,WACLtH,GAASsH,EAAAA,EAAAA,MACX,CACF,GAAG,CAAC3B,EAAO3F,EAAUoG,EAAUrE,KAE/Be,EAAAA,EAAAA,YAAU,WAMR,GALIgD,IAAgBjC,EAAAA,GAAAA,gBAClB7D,GAASuH,EAAAA,EAAAA,IAAkB,CAAEvE,QAAQ,GAAD,OAAKkD,GAAMpG,SAAUwG,KACzDtG,GAASwH,EAAAA,EAAAA,QAGP1B,IAAgBjC,EAAAA,GAAAA,YAAyB,CAC3C,IAAM4D,EAAWC,KAAKC,UAAU,CAAEtG,YAAa2E,EAAgB1E,MAAO,KACtEtB,GACE4H,EAAAA,EAAAA,IAAgB,CACd5E,QAAQ,GAAD,OAAKkD,GACZpG,SAAUwG,EACV/E,MAAOwE,EACP1E,YAAaoG,EACbrE,MAAOW,EACP8D,OAAQrB,EAAKjG,OAGjBP,GAASwH,EAAAA,EAAAA,MACX,CAEI1B,IAAgBjC,EAAAA,GAAAA,gBAClB7D,GACE8H,EAAAA,EAAAA,IAAkB,CAChB9E,QAAQ,GAAD,OAAKkD,GACZ3E,MAAOwE,EACP3C,MAAOwC,EAAQ5B,OAAS4B,EAAQA,EAAQ5B,OAAS,GAAGZ,MAAQ,EAAI,KAGpEpD,GAASwH,EAAAA,EAAAA,QAGP1B,IAAgBjC,EAAAA,GAAAA,aAA2BoC,IAC7CjG,GACE+H,EAAAA,EAAAA,IAAiB,CACf/E,QAAQ,GAAD,OAAKkD,GACZpG,SAAUwG,EACVL,OAAQA,EAAO1F,OAGnBP,GAASwH,EAAAA,EAAAA,OAEb,GAAG,CACD1B,EACAF,EACA5F,EACAkG,EACAH,EACAS,EACAR,EACAM,EACAL,EACAlC,IAGF,IAYMiE,GAAYC,EAAAA,EAAAA,aAAW,yCAC3B,WAAOC,GAAkB,gFACU,GAAzBC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,OAAQ3D,EAASyD,EAATzD,KAE1B0D,IACAA,EAAYpI,QAAUqI,EAAOrI,OAASoI,EAAY/C,cAAgBgD,EAAOhD,aAAY,oDAI3E,WAATX,EAAiB,gCACbzE,GAASqI,EAAAA,EAAAA,IAAoB,CAAEH,OAAAA,EAAQtC,QAAAA,EAASM,GAAAA,KAAO,KAAD,wBAE5DlG,GAASsI,EAAAA,EAAAA,IAAkB,CAAEJ,OAAAA,EAAQ1G,MAAAA,KAAU,2CAElD,mDAd0B,GAe3B,CAACxB,EAAUkG,EAAIN,EAASpE,IAE1B,OACE,+BACE,oBAAST,UAAWC,EAAAA,QAAe,UACjC,iBAAKD,UAAWC,EAAAA,YAAmB,WACjC,eAAID,UAAWC,EAAAA,MAAa,UAC1B,gCACGO,EAAMA,MAAO,IACG,KAAhBA,EAAMgH,QAAgB,kBAAMxH,UAAWC,EAAAA,YAAmB,cAAGO,EAAMgH,MAAK,aAG7E,iBAAKxH,UAAWC,EAAAA,eAAsB,UACnC4E,EAAQ5B,OAAS,IAChB,SAAC,KAAe,CAACgE,UAAWA,EAAU,UACpC,SAAC,KAAS,CACR5C,YAAY,UACZoD,UAAW,aACXnG,KAAM,WACNoC,KAAK,SAAQ,SAEZ,SAACJ,GAAQ,OACR,gCACEtD,UAAWC,EAAAA,YACXE,IAAKmD,EAASlD,UACVkD,EAASiB,gBAAc,eAE1B,OAAIM,GAASL,KAAI,SAAC3D,EAAQ7B,GAAK,OAC9B,SAAC,EAAM,CAAkB8B,WAAYD,EAAQ7B,MAAOA,GAAvC6B,EAAOrB,IAAyC,IAE9D8D,EAASqB,eACP,OAKb,iBAAK3E,UAAS,UAAKC,EAAAA,aAAmB,YAAIA,EAAAA,WAAoBC,QA/DnD,WACnBjB,GACEwD,EAAAA,EAAAA,IAAa,CACXjC,MAAM,GAAD,OAAKQ,EAAE,8BACZkC,WAAW,GAAD,OAAKlC,EAAE,gBACjBT,MAAOoC,EAAAA,GAAAA,KACPC,QAAQ,GAAD,OAAK5B,EAAE,iBACd6B,OAAQC,EAAAA,GAAAA,gBAGd,EAqD8F,UACjF9B,EAAE,+BACH,SAACkD,EAAA,EAAI,CAAC3D,MAAM,UAAU4D,KAAM,IAAKC,KAAK,MAAMpE,UAAWC,EAAAA,mBAOrE,C","sources":["webpack://project-managment-app/./src/pages/board/board.module.scss?8ed5","webpack://project-managment-app/./src/pages/board/column/column.module.scss?f490","webpack://project-managment-app/./src/pages/board/task/task.module.scss?b20a","pages/board/task/Task.tsx","pages/board/column/Column.tsx","pages/board/Board.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"board_wrapper__Sz3zA\",\"addButton\":\"board_addButton__Ds+sB\",\"title\":\"board_title__WYCDt\",\"description\":\"board_description__fQetx\",\"mainContent\":\"board_mainContent__j9sVR\",\"columnsWrapper\":\"board_columnsWrapper__9goGF\",\"columnsList\":\"board_columnsList__fBdaG\",\"icon\":\"board_icon__ZlxJc\"};","// extracted by mini-css-extract-plugin\nexport default {\"addButton\":\"column_addButton__ThOBk\",\"columnTitle\":\"column_columnTitle__Xg5qL\",\"form\":\"column_form__VVDCM\",\"formError\":\"column_formError__6apFY\",\"input\":\"column_input__DSnnH\",\"error\":\"column_error__HUYjh\",\"columnItem\":\"column_columnItem__KGws6\",\"titleName\":\"column_titleName__AagAk\",\"tasksList\":\"column_tasksList__yXUy-\",\"taskButton\":\"column_taskButton__4XVwe\",\"icon\":\"column_icon__RBY+l\",\"columnLine\":\"column_columnLine__luRLd\",\"button\":\"column_button__MU7iD\",\"buttonEdit\":\"column_buttonEdit__rPGEz\",\"submit\":\"column_submit__B65hc\"};","// extracted by mini-css-extract-plugin\nexport default {\"taskItem\":\"task_taskItem__jR-8n\",\"taskTitle\":\"task_taskTitle__0mhj-\",\"colorBadge\":\"task_colorBadge__m9c3x\",\"taskText\":\"task_taskText__6qW3V\"};","import React from 'react';\nimport { TaskParsedType } from 'store/boardSlice';\nimport styles from './task.module.scss';\nimport { useAppDispatch } from 'store/hooks';\nimport { setModalColumnId, setTaskId, setTaskModalOpen } from 'store/modalSlice';\nimport { Draggable } from 'react-beautiful-dnd';\n\ntype Props = {\n  taskData: TaskParsedType;\n  columnId: string;\n  index: number;\n};\n\nconst Task = (props: Props) => {\n  const { taskData, columnId, index } = props;\n  const dispatch = useAppDispatch();\n\n  const openTaskModal = () => {\n    dispatch(setTaskId(taskData));\n    dispatch(setModalColumnId(columnId));\n    dispatch(setTaskModalOpen());\n  };\n\n  return (\n    <Draggable draggableId={taskData._id} index={index}>\n      {(providedTask, snapshot) => {\n        // extending the DraggableStyle with our own inline styles\n        const style = {\n          boxShadow: snapshot.isDragging ? '0 0.3rem 1.6rem 0.1rem var(--card-hover)' : 'none',\n          background: snapshot.isDragging ? '#ffffffd1' : 'white',\n          ...providedTask.draggableProps.style,\n        };\n        return (\n          <li\n            className={styles.taskItem}\n            onClick={openTaskModal}\n            ref={providedTask.innerRef}\n            {...providedTask.draggableProps}\n            style={style}\n          >\n            <div className={styles.taskTitle} {...providedTask.dragHandleProps}>\n              <div\n                className={styles.colorBadge}\n                style={{ background: taskData.description.color }}\n              ></div>\n              <div className={styles.taskText}>{taskData.title}</div>\n            </div>\n          </li>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nexport default Task;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { ColumnType } from 'store/boardSlice';\nimport styles from './column.module.scss';\nimport { useAppSelector, useAppDispatch } from 'store/hooks';\nimport Icon from 'components/Icon/Icon';\nimport {\n  BtnColor,\n  ModalAction,\n  setModalColumnId,\n  setModalOpen,\n  setTaskOrder,\n} from 'store/modalSlice';\nimport { useTranslation } from 'react-i18next';\nimport { thunkGetAllTasks } from 'store/middleware/tasks';\nimport { thunkUpdateTitleColumn } from 'store/middleware/columns';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport Task from '../task/Task';\n\ntype Props = {\n  columnData: ColumnType;\n  index: number;\n};\n\ninterface IFormInputs {\n  input: string;\n}\n\nconst Column = (props: Props) => {\n  const { tasks } = useAppSelector((state) => state.board);\n  const column = props.columnData;\n  const columnTasks = tasks[column._id];\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const [isEditable, setIsEditable] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<IFormInputs>({\n    mode: 'onChange',\n  });\n\n  const formEdit = useRef<HTMLFormElement>(null);\n  const columnTitle = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    dispatch(thunkGetAllTasks({ boardId: column.boardId, columnId: column._id }));\n  }, [dispatch, column.boardId, column._id]);\n\n  const onSubmitEdit: SubmitHandler<IFormInputs> = (data) => {\n    dispatch(\n      thunkUpdateTitleColumn({\n        boardId: column.boardId,\n        columnId: column._id,\n        order: column.order,\n        title: data.input,\n      })\n    ).then(() => setIsEditable(false));\n  };\n\n  const deleteColumn = () => {\n    dispatch(setModalColumnId(column._id));\n    dispatch(\n      setModalOpen({\n        message: `${t('MODAL.DELETE_MSG')} ${column.title}?`,\n        color: BtnColor.RED,\n        btnText: `${t('MODAL.DELETE')}`,\n        action: ModalAction.COLUMN_DELETE,\n      })\n    );\n  };\n\n  const createTask = () => {\n    const taskOrder = columnTasks.length ? columnTasks[columnTasks.length - 1].order + 1 : 0;\n    dispatch(setModalColumnId(column._id));\n    dispatch(\n      setModalOpen({\n        title: `${t('BOARD.CREATE_TASK_TITLE')}`,\n        inputTitle: `${t('MODAL.TITLE')}`,\n        inputDescr: `${t('MODAL.DESCRIPTION')}`,\n        color: BtnColor.BLUE,\n        btnText: `${t('MODAL.CREATE')}`,\n        action: ModalAction.TASK_CREATE,\n      })\n    );\n    dispatch(setTaskOrder(taskOrder));\n  };\n\n  const CancelTitleEdit = () => {\n    reset();\n    setIsEditable(false);\n  };\n\n  return (\n    <Draggable draggableId={column._id} index={props.index}>\n      {(provided, snapshot) => {\n        // extending the DraggableStyle with our own inline styles\n        const style = {\n          backgroundColor: snapshot.isDragging ? '#0047ff26' : '#0047ff14',\n          ...provided.draggableProps.style,\n        };\n        return (\n          <li\n            data-key={column._id}\n            className={styles.columnItem}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            style={style}\n          >\n            {isEditable ? (\n              <form ref={formEdit} className={styles.form} onSubmit={handleSubmit(onSubmitEdit)}>\n                <input\n                  autoFocus\n                  type=\"text\"\n                  {...register('input', {\n                    value: column.title,\n                    required: 'REQ_ER',\n                    maxLength: { value: 25, message: 'MAX_ER' },\n                  })}\n                  className={`${styles.input} ${errors.input ? styles.error : ''}`}\n                  onBlur={handleSubmit(onSubmitEdit)}\n                />\n                <button\n                  className={`${styles.buttonEdit} ${styles.submit}`}\n                  type=\"submit\"\n                  disabled={!(Object.keys(errors).length === 0)}\n                >\n                  <Icon color=\"#0047FF\" size={100} icon=\"done\" className={styles.icon} />\n                </button>\n                <button className={styles.buttonEdit} onClick={CancelTitleEdit}>\n                  <Icon color=\"#CC0707\" size={100} icon=\"cancel\" className={styles.icon} />\n                </button>\n                <span className={styles.formError}>\n                  {errors.input && t(`COLUMN.${errors.input.message}`)}\n                </span>\n              </form>\n            ) : (\n              <div ref={columnTitle} className={styles.columnTitle} {...provided.dragHandleProps}>\n                <div className={styles.titleName} onClick={() => setIsEditable(true)}>\n                  {column.title}\n                </div>\n                <button className={styles.button} onClick={deleteColumn}>\n                  <Icon color=\"#CC0707\" size={100} icon=\"trash\" className={styles.icon} />\n                </button>\n              </div>\n            )}\n            <hr className={styles.columnLine}></hr>\n            <Droppable droppableId={column._id} mode={'standard'} type=\"TASK\">\n              {(providedColumn) => (\n                <ul\n                  className={styles.tasksList}\n                  {...providedColumn.droppableProps}\n                  ref={providedColumn.innerRef}\n                >\n                  {columnTasks &&\n                    columnTasks.map((task, i) => (\n                      <Task key={task._id} taskData={task} columnId={column._id} index={i} />\n                    ))}\n                  {providedColumn.placeholder}\n                </ul>\n              )}\n            </Droppable>\n            <div className={`${styles.taskButton} ${styles.addButton}`} onClick={createTask}>\n              {t('BOARD.CREATE_TASK_BUTTON')}\n              <Icon color=\"#0047FF\" size={100} icon=\"add\" className={styles.icon} />\n            </div>\n          </li>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nexport default Column;\n","import React, { useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { clearBoardErrors, clearState, thunkGetSingleBoard } from 'store/boardSlice';\nimport styles from './board.module.scss';\nimport { useAppSelector, useAppDispatch } from 'store/hooks';\nimport {\n  thunkCreateColumn,\n  thunkDeleteColumn,\n  thunkDragEndColumns,\n} from 'store/middleware/columns';\nimport { setAuth, userSelector } from 'store/authSlice';\nimport Icon from 'components/Icon/Icon';\nimport {\n  BtnColor,\n  ModalAction,\n  modalColumnIdSelector,\n  resetModal,\n  setModalClose,\n  setModalOpen,\n  setTaskModalClose,\n} from 'store/modalSlice';\nimport { useTranslation } from 'react-i18next';\nimport Column from './column/Column';\nimport { thunkCreateTask, thunkDeleteTasks, thunkDragEndTasks } from 'store/middleware/tasks';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getMsgErrorBoard } from 'utils/func/getMsgErrorBoard';\nimport ROUTES from 'utils/constants/ROUTES';\n\nconst Board = () => {\n  const { title, error, columns, tasks } = useAppSelector((state) => state.board);\n  const { modalAction, userInputTitle, userInputDescr, taskId, taskOrder } = useAppSelector(\n    (state) => state.modal\n  );\n  const dispatch = useAppDispatch();\n  const { id } = useParams<'id'>();\n  const navigate = useNavigate();\n  const modalColumnId = useAppSelector(modalColumnIdSelector);\n  const { t } = useTranslation();\n  const user = useAppSelector(userSelector);\n\n  useEffect(() => {\n    dispatch(thunkGetSingleBoard(`${id}`));\n    return () => {\n      dispatch(clearState());\n    };\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    if (error) {\n      const [code, message] = error.split('/');\n      let errorMessageCode = code;\n      if (code) {\n        if (code === '403') {\n          dispatch(setAuth(false));\n          dispatch(setTaskModalClose());\n          dispatch(setModalClose());\n        }\n        if (message === 'Board was not founded!') {\n          navigate(ROUTES.boards, { replace: true });\n          errorMessageCode = code + '_BOARD';\n        }\n        toast.error(t(getMsgErrorBoard(errorMessageCode)));\n        dispatch(clearBoardErrors());\n      }\n    }\n    return () => {\n      dispatch(clearBoardErrors());\n    };\n  }, [error, dispatch, navigate, t]);\n\n  useEffect(() => {\n    if (modalAction === ModalAction.COLUMN_DELETE) {\n      dispatch(thunkDeleteColumn({ boardId: `${id}`, columnId: modalColumnId }));\n      dispatch(resetModal());\n    }\n\n    if (modalAction === ModalAction.TASK_CREATE) {\n      const newDescr = JSON.stringify({ description: userInputDescr, color: '' });\n      dispatch(\n        thunkCreateTask({\n          boardId: `${id}`,\n          columnId: modalColumnId,\n          title: userInputTitle,\n          description: newDescr,\n          order: taskOrder,\n          userId: user._id,\n        })\n      );\n      dispatch(resetModal());\n    }\n\n    if (modalAction === ModalAction.COLUMN_CREATE) {\n      dispatch(\n        thunkCreateColumn({\n          boardId: `${id}`,\n          title: userInputTitle,\n          order: columns.length ? columns[columns.length - 1].order + 1 : 0,\n        })\n      );\n      dispatch(resetModal());\n    }\n\n    if (modalAction === ModalAction.TASK_DELETE && taskId) {\n      dispatch(\n        thunkDeleteTasks({\n          boardId: `${id}`,\n          columnId: modalColumnId,\n          taskId: taskId._id,\n        })\n      );\n      dispatch(resetModal());\n    }\n  }, [\n    modalAction,\n    columns,\n    dispatch,\n    id,\n    userInputTitle,\n    user,\n    userInputDescr,\n    modalColumnId,\n    taskId,\n    taskOrder,\n  ]);\n\n  const createColumn = () => {\n    dispatch(\n      setModalOpen({\n        title: `${t('BOARD.CREATE_COLUMN_TITLE')}`,\n        inputTitle: `${t('MODAL.TITLE')}`,\n        color: BtnColor.BLUE,\n        btnText: `${t('MODAL.CREATE')}`,\n        action: ModalAction.COLUMN_CREATE,\n      })\n    );\n  };\n\n  const onDragEnd = useCallback(\n    async (result: DropResult) => {\n      const { destination, source, type } = result;\n      if (\n        !destination ||\n        (destination.index === source.index && destination.droppableId === source.droppableId)\n      ) {\n        return;\n      }\n      if (type === 'COLUMN') {\n        await dispatch(thunkDragEndColumns({ result, columns, id }));\n      } else {\n        dispatch(thunkDragEndTasks({ result, tasks }));\n      }\n    },\n    [dispatch, id, columns, tasks]\n  );\n  return (\n    <>\n      <section className={styles.wrapper}>\n        <div className={styles.mainContent}>\n          <h2 className={styles.title}>\n            <>\n              {title.title}{' '}\n              {title.descr !== '' && <span className={styles.description}>({title.descr})</span>}\n            </>\n          </h2>\n          <div className={styles.columnsWrapper}>\n            {columns.length > 0 && (\n              <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable\n                  droppableId=\"boardId\"\n                  direction={'horizontal'}\n                  mode={'standard'}\n                  type=\"COLUMN\"\n                >\n                  {(provided) => (\n                    <ul\n                      className={styles.columnsList}\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                    >\n                      {[...columns].map((column, index) => (\n                        <Column key={column._id} columnData={column} index={index} />\n                      ))}\n                      {provided.placeholder}\n                    </ul>\n                  )}\n                </Droppable>\n              </DragDropContext>\n            )}\n            <div className={`${styles.columnButton} ${styles.addButton}`} onClick={createColumn}>\n              {t('BOARD.CREATE_COLUMN_BUTTON')}\n              <Icon color=\"#0047FF\" size={100} icon=\"add\" className={styles.icon} />\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Board;\n"],"names":["props","taskData","columnId","index","dispatch","useAppDispatch","openTaskModal","setTaskId","setModalColumnId","setTaskModalOpen","draggableId","_id","providedTask","snapshot","style","boxShadow","isDragging","background","draggableProps","className","styles","onClick","ref","innerRef","dragHandleProps","description","color","title","tasks","useAppSelector","state","board","column","columnData","columnTasks","t","useTranslation","useState","isEditable","setIsEditable","useForm","mode","register","handleSubmit","errors","formState","reset","formEdit","useRef","columnTitle","useEffect","thunkGetAllTasks","boardId","onSubmitEdit","data","thunkUpdateTitleColumn","order","input","then","deleteColumn","setModalOpen","message","BtnColor","btnText","action","ModalAction","createTask","taskOrder","length","inputTitle","inputDescr","setTaskOrder","CancelTitleEdit","provided","backgroundColor","onSubmit","autoFocus","type","value","required","maxLength","onBlur","disabled","Object","keys","Icon","size","icon","droppableId","providedColumn","droppableProps","map","task","i","placeholder","error","columns","modal","modalAction","userInputTitle","userInputDescr","taskId","id","useParams","navigate","useNavigate","modalColumnId","modalColumnIdSelector","user","userSelector","thunkGetSingleBoard","clearState","split","code","errorMessageCode","setAuth","setTaskModalClose","setModalClose","ROUTES","replace","toast","getMsgErrorBoard","clearBoardErrors","thunkDeleteColumn","resetModal","newDescr","JSON","stringify","thunkCreateTask","userId","thunkCreateColumn","thunkDeleteTasks","onDragEnd","useCallback","result","destination","source","thunkDragEndColumns","thunkDragEndTasks","descr","direction"],"sourceRoot":""}